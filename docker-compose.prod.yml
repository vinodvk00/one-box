version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: onemail-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-onemail}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-onemail123}
      - POSTGRES_DB=${POSTGRES_DB:-onemail_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - onemail-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-onemail}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: onemail-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - onemail-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: onemail-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ES_PORT:-9200}:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - onemail-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: onemail-backend
    environment:
      # Server
      - PORT=8000
      - NODE_ENV=production

      # Database (PostgreSQL)
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-onemail}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-onemail123}
      - POSTGRES_DB=${POSTGRES_DB:-onemail_db}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-onemail}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-onemail123}
      - DB_NAME=${POSTGRES_DB:-onemail_db}

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # Elasticsearch
      - ELASTICSEARCH_HOST=http://elasticsearch:9200

      # Google OAuth
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - GOOGLE_LOGIN_REDIRECT_URI=${GOOGLE_LOGIN_REDIRECT_URI:-${GOOGLE_REDIRECT_URI}}

      # Encryption
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}

      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Frontend URL for CORS
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}

      # Session
      - SESSION_SECRET=${SESSION_SECRET:-change-this-secret-in-production}

      # Notifications (optional)
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - WEBHOOK_SITE_URL=${WEBHOOK_SITE_URL:-}

      # Sentry (optional)
      - SENTRY_DSN=${SENTRY_DSN:-}

    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - onemail-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: onemail-frontend
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - onemail-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: onemail-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - onemail-network
    restart: unless-stopped

  # PgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: onemail-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@onemail.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - onemail-network
    profiles:
      - tools
    restart: unless-stopped

  # Kibana (optional - for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: onemail-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    networks:
      - onemail-network
    profiles:
      - tools
    restart: unless-stopped

  # RedisInsight (optional - for Redis management)
  redisinsight:
    image: redis/redisinsight:latest
    container_name: onemail-redisinsight
    ports:
      - "${REDISINSIGHT_PORT:-5540}:5540"
    volumes:
      - redisinsight-data:/data
    depends_on:
      - redis
    networks:
      - onemail-network
    profiles:
      - tools
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  es-data:
  redisinsight-data:

networks:
  onemail-network:
    driver: bridge
